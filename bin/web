'use strict';

const config = require('config');
const http = require('http');
const logger = require('logger');
const path = require('path');
const express = require('express');
const helmet = require('helmet');
const bunyanMiddleware = require('bunyan-middleware');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const fileUpload = require('express-fileupload');
const httpError = require('http-errors');
const api = require('api');

const fs = require('fs');
const { mustAuthenticated, checkAccess } = require('api/utils');
const { Attachment } = require('db');
const { URL_ATTACHMENT_FILE } = require('const');



//
//
// init Express
//
//

const app = express();


// helmet
if (config.IS_PROD) // disable for local network
    app.use(helmet());

// log all requests
app.use(bunyanMiddleware({logger}));


// parsing POST/PUT body
app.use(express.json({ // all API in json (post + base64 images inside)
    limit: 30 * (1024 * 1024)
}));
app.use(express.urlencoded({ // FormData | File (limit actually used for body (chunk) in form, File size ignored)
    limit: 5 * (1024 * 1024), // +/- chunk size
    extended: true
}));


app.use(fileUpload({ // files in FormData
    limits: {
        fileSize: 15 * (1024 * 1024),
        files: 5,
        fieldSize: 5 * (1024 * 1024) // chunk ??
    },
    createParentPath: true,
    useTempFiles: true,
    tempFileDir: config.PATH_TMP,
    abortOnLimit: true,
    //safeFileNames: true,
    preserveExtension: 4
}));


// session
app.use(cookieParser());
app.use(session({
    key: 'sid',
    secret: config.COOKIE_SECRET,
    resave: true,
    rolling: true,
    saveUninitialized: false,
    cookie: {
        maxAge: config.SESSION_AGE,
        httpOnly: true
    }
}));


// api routs
app.use('/api', api);

// public static (tries to find: config.PATH_CLIENT_PUBLIC + '/static/css/[...].css' from url)
app.use(express.static(config.PATH_CLIENT_PUBLIC));

// secure serve attachments|uploads
app.get(
    URL_ATTACHMENT_FILE+':id',
    mustAuthenticated,
    checkAccess(Attachment, req => req.params.id),

    async (req, res, next) => {
        try {
            const a = await Attachment.findByPk(req.params.id);
            const data = fs.readFileSync(path.join(config.PATH_ATTACHMENTS, a.relativeFilePath));
            res.attachment(a.fileName);
            res.send(data);

        } catch (e) {
            next(httpError(404, e));
        }
    }
);

// all other routs to index.html from client build
app.use((req, res, next) => {
    res.sendFile(path.join(config.PATH_CLIENT_PUBLIC, 'index.html'));
});

// all Request error
app.use((error, req, res, next) => {
//    logger.error(error);
//    if (!res.headersSent) {
    res.status(error.status || 500);
    res.send(typeof error === 'string' ? error : error.message);
});




//
//
// Create HTTP server.
//
//

const server = http.createServer(app);

// listening
server.listen(config.PORT, () => {
    logger.info('Listening on port '+ server.address().port);
});

// server errors handler
server.on('error', error => {
    if (error.syscall !== 'listen') logger.error(error);

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error('Port '+ server.address().port +' requires elevated privileges');
            break;
        case 'EADDRINUSE':
            logger.error('Port '+ server.address().port +' is already in use');
            break;
        default:
            logger.error(error);
    }

    // exit
    process.exit(1);
});